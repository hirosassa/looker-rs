/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### Try It Out!  This section describes the existing 'api-docs' page available on Looker instances. We recommend using the [API Explorer](https://looker.com/docs/r/api/explorer) instead.  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  **NOTE**! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations. (API Explorer's \"Run It\" feature requires a check mark before running API operations that can change data.)   ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Dashboard {
    /// Operations the current user is able to perform on this object
    #[serde(rename = "can", skip_serializing_if = "Option::is_none")]
    pub can: Option<::std::collections::HashMap<String, bool>>,
    /// Content Favorite Id
    #[serde(
        rename = "content_favorite_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_favorite_id: Option<i64>,
    /// Id of content metadata
    #[serde(
        rename = "content_metadata_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub content_metadata_id: Option<i64>,
    /// Description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Is Hidden
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    /// Unique Id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<Box<crate::models::LookModel>>,
    /// Timezone in which the Dashboard will run by default.
    #[serde(rename = "query_timezone", skip_serializing_if = "Option::is_none")]
    pub query_timezone: Option<String>,
    /// Is Read-only
    #[serde(rename = "readonly", skip_serializing_if = "Option::is_none")]
    pub readonly: Option<bool>,
    /// Refresh Interval, as a time duration phrase like \"2 hours 30 minutes\". A number with no time units will be interpreted as whole seconds.
    #[serde(rename = "refresh_interval", skip_serializing_if = "Option::is_none")]
    pub refresh_interval: Option<String>,
    /// Refresh Interval in milliseconds
    #[serde(
        rename = "refresh_interval_to_i",
        skip_serializing_if = "Option::is_none"
    )]
    pub refresh_interval_to_i: Option<i64>,
    #[serde(rename = "folder", skip_serializing_if = "Option::is_none")]
    pub folder: Option<Box<crate::models::FolderBase>>,
    /// Dashboard Title
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Id of User
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<i64>,
    /// Content Metadata Slug
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    /// The preferred route for viewing this dashboard (ie: dashboards or dashboards-next)
    #[serde(rename = "preferred_viewer", skip_serializing_if = "Option::is_none")]
    pub preferred_viewer: Option<String>,
    #[serde(rename = "space", skip_serializing_if = "Option::is_none")]
    pub space: Option<Box<crate::models::SpaceBase>>,
    /// Enables alerts to keep in sync with dashboard filter changes - only available in alerts 2.0 (beta)
    #[serde(
        rename = "alert_sync_with_dashboard_filter_enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub alert_sync_with_dashboard_filter_enabled: Option<bool>,
    /// Background color
    #[serde(rename = "background_color", skip_serializing_if = "Option::is_none")]
    pub background_color: Option<String>,
    /// Time that the Dashboard was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Enables crossfiltering in dashboards - only available in dashboards-next (beta)
    #[serde(
        rename = "crossfilter_enabled",
        skip_serializing_if = "Option::is_none"
    )]
    pub crossfilter_enabled: Option<bool>,
    /// Elements
    #[serde(rename = "dashboard_elements", skip_serializing_if = "Option::is_none")]
    pub dashboard_elements: Option<Vec<crate::models::DashboardElement>>,
    /// Filters
    #[serde(rename = "dashboard_filters", skip_serializing_if = "Option::is_none")]
    pub dashboard_filters: Option<Vec<crate::models::DashboardFilter>>,
    /// Layouts
    #[serde(rename = "dashboard_layouts", skip_serializing_if = "Option::is_none")]
    pub dashboard_layouts: Option<Vec<crate::models::DashboardLayout>>,
    /// Whether or not a dashboard is 'soft' deleted.
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Time that the Dashboard was 'soft' deleted.
    #[serde(rename = "deleted_at", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
    /// Id of User that 'soft' deleted the dashboard.
    #[serde(rename = "deleter_id", skip_serializing_if = "Option::is_none")]
    pub deleter_id: Option<i64>,
    /// Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).
    #[serde(rename = "edit_uri", skip_serializing_if = "Option::is_none")]
    pub edit_uri: Option<String>,
    /// Number of times favorited
    #[serde(rename = "favorite_count", skip_serializing_if = "Option::is_none")]
    pub favorite_count: Option<i64>,
    /// Time the dashboard was last accessed
    #[serde(rename = "last_accessed_at", skip_serializing_if = "Option::is_none")]
    pub last_accessed_at: Option<String>,
    /// Time last viewed in the Looker web UI
    #[serde(rename = "last_viewed_at", skip_serializing_if = "Option::is_none")]
    pub last_viewed_at: Option<String>,
    /// configuration option that governs how dashboard loading will happen.
    #[serde(rename = "load_configuration", skip_serializing_if = "Option::is_none")]
    pub load_configuration: Option<String>,
    /// Links this dashboard to a particular LookML dashboard such that calling a **sync** operation on that LookML dashboard will update this dashboard to match.
    #[serde(rename = "lookml_link_id", skip_serializing_if = "Option::is_none")]
    pub lookml_link_id: Option<String>,
    /// Show filters bar.  **Security Note:** This property only affects the *cosmetic* appearance of the dashboard, not a user's ability to access data. Hiding the filters bar does **NOT** prevent users from changing filters by other means. For information on how to set up secure data access control policies, see [Control User Access to Data](https://looker.com/docs/r/api/control-access)
    #[serde(rename = "show_filters_bar", skip_serializing_if = "Option::is_none")]
    pub show_filters_bar: Option<bool>,
    /// Show title
    #[serde(rename = "show_title", skip_serializing_if = "Option::is_none")]
    pub show_title: Option<bool>,
    /// Id of Space
    #[serde(rename = "space_id", skip_serializing_if = "Option::is_none")]
    pub space_id: Option<String>,
    /// Id of folder
    #[serde(rename = "folder_id", skip_serializing_if = "Option::is_none")]
    pub folder_id: Option<String>,
    /// Color of text on text tiles
    #[serde(
        rename = "text_tile_text_color",
        skip_serializing_if = "Option::is_none"
    )]
    pub text_tile_text_color: Option<String>,
    /// Tile background color
    #[serde(
        rename = "tile_background_color",
        skip_serializing_if = "Option::is_none"
    )]
    pub tile_background_color: Option<String>,
    /// Tile text color
    #[serde(rename = "tile_text_color", skip_serializing_if = "Option::is_none")]
    pub tile_text_color: Option<String>,
    /// Title color
    #[serde(rename = "title_color", skip_serializing_if = "Option::is_none")]
    pub title_color: Option<String>,
    /// Number of times viewed in the Looker web UI
    #[serde(rename = "view_count", skip_serializing_if = "Option::is_none")]
    pub view_count: Option<i64>,
    #[serde(rename = "appearance", skip_serializing_if = "Option::is_none")]
    pub appearance: Option<Box<crate::models::DashboardAppearance>>,
}

impl Dashboard {
    pub fn new() -> Dashboard {
        Dashboard {
            can: None,
            content_favorite_id: None,
            content_metadata_id: None,
            description: None,
            hidden: None,
            id: None,
            model: None,
            query_timezone: None,
            readonly: None,
            refresh_interval: None,
            refresh_interval_to_i: None,
            folder: None,
            title: None,
            user_id: None,
            slug: None,
            preferred_viewer: None,
            space: None,
            alert_sync_with_dashboard_filter_enabled: None,
            background_color: None,
            created_at: None,
            crossfilter_enabled: None,
            dashboard_elements: None,
            dashboard_filters: None,
            dashboard_layouts: None,
            deleted: None,
            deleted_at: None,
            deleter_id: None,
            edit_uri: None,
            favorite_count: None,
            last_accessed_at: None,
            last_viewed_at: None,
            load_configuration: None,
            lookml_link_id: None,
            show_filters_bar: None,
            show_title: None,
            space_id: None,
            folder_id: None,
            text_tile_text_color: None,
            tile_background_color: None,
            tile_text_color: None,
            title_color: None,
            view_count: None,
            appearance: None,
        }
    }
}
