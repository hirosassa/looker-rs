/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### Try It Out!  This section describes the existing 'api-docs' page available on Looker instances. We recommend using the [API Explorer](https://looker.com/docs/r/api/explorer) instead.  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  **NOTE**! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations. (API Explorer's \"Run It\" feature requires a check mark before running API operations that can change data.)   ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LookmlModelExploreField {
    /// The appropriate horizontal text alignment the values of this field should be displayed in. Valid values are: \"left\", \"right\".
    #[serde(rename = "align", skip_serializing_if = "Option::is_none")]
    pub align: Option<String>,
    /// Whether it's possible to filter on this field.
    #[serde(rename = "can_filter", skip_serializing_if = "Option::is_none")]
    pub can_filter: Option<bool>,
    /// Field category Valid values are: \"parameter\", \"filter\", \"measure\", \"dimension\".
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// The default value that this field uses when filtering. Null if there is no default value.
    #[serde(
        rename = "default_filter_value",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_filter_value: Option<String>,
    /// Description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Dimension group if this field is part of a dimension group. If not, this will be null.
    #[serde(rename = "dimension_group", skip_serializing_if = "Option::is_none")]
    pub dimension_group: Option<String>,
    /// An array enumerating all the possible values that this field can contain. When null, there is no limit to the set of possible values this field can contain.
    #[serde(rename = "enumerations", skip_serializing_if = "Option::is_none")]
    pub enumerations: Option<Vec<crate::models::LookmlModelExploreFieldEnumeration>>,
    /// An error message indicating a problem with the definition of this field. If there are no errors, this will be null.
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// A label creating a grouping of fields. All fields with this label should be presented together when displayed in a UI.
    #[serde(rename = "field_group_label", skip_serializing_if = "Option::is_none")]
    pub field_group_label: Option<String>,
    /// When presented in a field group via field_group_label, a shorter name of the field to be displayed in that context.
    #[serde(
        rename = "field_group_variant",
        skip_serializing_if = "Option::is_none"
    )]
    pub field_group_variant: Option<String>,
    /// The style of dimension fill that is possible for this field. Null if no dimension fill is possible. Valid values are: \"enumeration\", \"range\".
    #[serde(rename = "fill_style", skip_serializing_if = "Option::is_none")]
    pub fill_style: Option<String>,
    /// An offset (in months) from the calendar start month to the fiscal start month defined in the LookML model this field belongs to.
    #[serde(
        rename = "fiscal_month_offset",
        skip_serializing_if = "Option::is_none"
    )]
    pub fiscal_month_offset: Option<i64>,
    /// Whether this field has a set of allowed_values specified in LookML.
    #[serde(rename = "has_allowed_values", skip_serializing_if = "Option::is_none")]
    pub has_allowed_values: Option<bool>,
    /// Whether this field should be hidden from the user interface.
    #[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    /// Whether this field is a filter.
    #[serde(rename = "is_filter", skip_serializing_if = "Option::is_none")]
    pub is_filter: Option<bool>,
    /// Whether this field represents a fiscal time value.
    #[serde(rename = "is_fiscal", skip_serializing_if = "Option::is_none")]
    pub is_fiscal: Option<bool>,
    /// Whether this field is of a type that represents a numeric value.
    #[serde(rename = "is_numeric", skip_serializing_if = "Option::is_none")]
    pub is_numeric: Option<bool>,
    /// Whether this field is of a type that represents a time value.
    #[serde(rename = "is_timeframe", skip_serializing_if = "Option::is_none")]
    pub is_timeframe: Option<bool>,
    /// Whether this field can be time filtered.
    #[serde(rename = "can_time_filter", skip_serializing_if = "Option::is_none")]
    pub can_time_filter: Option<bool>,
    #[serde(rename = "time_interval", skip_serializing_if = "Option::is_none")]
    pub time_interval: Option<Box<crate::models::LookmlModelExploreFieldTimeInterval>>,
    /// Fully-qualified human-readable label of the field.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The name of the parameter that will provide a parameterized label for this field, if available in the current context.
    #[serde(
        rename = "label_from_parameter",
        skip_serializing_if = "Option::is_none"
    )]
    pub label_from_parameter: Option<String>,
    /// The human-readable label of the field, without the view label.
    #[serde(rename = "label_short", skip_serializing_if = "Option::is_none")]
    pub label_short: Option<String>,
    /// A URL linking to the definition of this field in the LookML IDE.
    #[serde(rename = "lookml_link", skip_serializing_if = "Option::is_none")]
    pub lookml_link: Option<String>,
    #[serde(rename = "map_layer", skip_serializing_if = "Option::is_none")]
    pub map_layer: Option<Box<crate::models::LookmlModelExploreFieldMapLayer>>,
    /// Whether this field is a measure.
    #[serde(rename = "measure", skip_serializing_if = "Option::is_none")]
    pub measure: Option<bool>,
    /// Fully-qualified name of the field.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// If yes, the field will not be localized with the user attribute number_format. Defaults to no
    #[serde(
        rename = "strict_value_format",
        skip_serializing_if = "Option::is_none"
    )]
    pub strict_value_format: Option<bool>,
    /// Whether this field is a parameter.
    #[serde(rename = "parameter", skip_serializing_if = "Option::is_none")]
    pub parameter: Option<bool>,
    /// Whether this field can be removed from a query.
    #[serde(rename = "permanent", skip_serializing_if = "Option::is_none")]
    pub permanent: Option<bool>,
    /// Whether or not the field represents a primary key.
    #[serde(rename = "primary_key", skip_serializing_if = "Option::is_none")]
    pub primary_key: Option<bool>,
    /// The name of the project this field is defined in.
    #[serde(rename = "project_name", skip_serializing_if = "Option::is_none")]
    pub project_name: Option<String>,
    /// When true, it's not possible to re-sort this field's values without re-running the SQL query, due to database logic that affects the sort.
    #[serde(
        rename = "requires_refresh_on_sort",
        skip_serializing_if = "Option::is_none"
    )]
    pub requires_refresh_on_sort: Option<bool>,
    /// The LookML scope this field belongs to. The scope is typically the field's view.
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Whether this field can be sorted.
    #[serde(rename = "sortable", skip_serializing_if = "Option::is_none")]
    pub sortable: Option<bool>,
    /// The path portion of source_file_path.
    #[serde(rename = "source_file", skip_serializing_if = "Option::is_none")]
    pub source_file: Option<String>,
    /// The fully-qualified path of the project file this field is defined in.
    #[serde(rename = "source_file_path", skip_serializing_if = "Option::is_none")]
    pub source_file_path: Option<String>,
    /// SQL expression as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
    #[serde(rename = "sql", skip_serializing_if = "Option::is_none")]
    pub sql: Option<String>,
    /// An array of conditions and values that make up a SQL Case expression, as defined in the LookML model. The SQL syntax shown here is a representation intended for auditability, and is not neccessarily an exact match for what will ultimately be run in the database. It may contain special LookML syntax or annotations that are not valid SQL. This will be null if the current user does not have the see_lookml permission for the field's model.
    #[serde(rename = "sql_case", skip_serializing_if = "Option::is_none")]
    pub sql_case: Option<Vec<crate::models::LookmlModelExploreFieldSqlCase>>,
    /// Array of filter conditions defined for the measure in LookML.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<crate::models::LookmlModelExploreFieldMeasureFilters>>,
    /// The name of the dimension to base suggest queries from.
    #[serde(rename = "suggest_dimension", skip_serializing_if = "Option::is_none")]
    pub suggest_dimension: Option<String>,
    /// The name of the explore to base suggest queries from.
    #[serde(rename = "suggest_explore", skip_serializing_if = "Option::is_none")]
    pub suggest_explore: Option<String>,
    /// Whether or not suggestions are possible for this field.
    #[serde(rename = "suggestable", skip_serializing_if = "Option::is_none")]
    pub suggestable: Option<bool>,
    /// If available, a list of suggestions for this field. For most fields, a suggest query is a more appropriate way to get an up-to-date list of suggestions. Or use enumerations to list all the possible values.
    #[serde(rename = "suggestions", skip_serializing_if = "Option::is_none")]
    pub suggestions: Option<Vec<String>>,
    /// An array of arbitrary string tags provided in the model for this field.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The LookML type of the field.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// An array of user attribute types that are allowed to be used in filters on this field. Valid values are: \"advanced_filter_string\", \"advanced_filter_number\", \"advanced_filter_datetime\", \"string\", \"number\", \"datetime\", \"relative_url\", \"yesno\", \"zipcode\".
    #[serde(
        rename = "user_attribute_filter_types",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_attribute_filter_types: Option<Vec<String>>,
    /// If specified, the LookML value format string for formatting values of this field.
    #[serde(rename = "value_format", skip_serializing_if = "Option::is_none")]
    pub value_format: Option<String>,
    /// The name of the view this field belongs to.
    #[serde(rename = "view", skip_serializing_if = "Option::is_none")]
    pub view: Option<String>,
    /// The human-readable label of the view the field belongs to.
    #[serde(rename = "view_label", skip_serializing_if = "Option::is_none")]
    pub view_label: Option<String>,
    /// Whether this field was specified in \"dynamic_fields\" and is not part of the model.
    #[serde(rename = "dynamic", skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<bool>,
    /// The name of the starting day of the week. Valid values are: \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\".
    #[serde(rename = "week_start_day", skip_serializing_if = "Option::is_none")]
    pub week_start_day: Option<String>,
}

impl LookmlModelExploreField {
    pub fn new() -> LookmlModelExploreField {
        LookmlModelExploreField {
            align: None,
            can_filter: None,
            category: None,
            default_filter_value: None,
            description: None,
            dimension_group: None,
            enumerations: None,
            error: None,
            field_group_label: None,
            field_group_variant: None,
            fill_style: None,
            fiscal_month_offset: None,
            has_allowed_values: None,
            hidden: None,
            is_filter: None,
            is_fiscal: None,
            is_numeric: None,
            is_timeframe: None,
            can_time_filter: None,
            time_interval: None,
            label: None,
            label_from_parameter: None,
            label_short: None,
            lookml_link: None,
            map_layer: None,
            measure: None,
            name: None,
            strict_value_format: None,
            parameter: None,
            permanent: None,
            primary_key: None,
            project_name: None,
            requires_refresh_on_sort: None,
            scope: None,
            sortable: None,
            source_file: None,
            source_file_path: None,
            sql: None,
            sql_case: None,
            filters: None,
            suggest_dimension: None,
            suggest_explore: None,
            suggestable: None,
            suggestions: None,
            tags: None,
            _type: None,
            user_attribute_filter_types: None,
            value_format: None,
            view: None,
            view_label: None,
            dynamic: None,
            week_start_day: None,
        }
    }
}
