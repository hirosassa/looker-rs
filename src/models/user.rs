/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### Try It Out!  This section describes the existing 'api-docs' page available on Looker instances. We recommend using the [API Explorer](https://looker.com/docs/r/api/explorer) instead.  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  **NOTE**! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations. (API Explorer's \"Run It\" feature requires a check mark before running API operations that can change data.)   ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct User {
    /// Operations the current user is able to perform on this object
    #[serde(rename = "can", skip_serializing_if = "Option::is_none")]
    pub can: Option<::std::collections::HashMap<String, bool>>,
    /// URL for the avatar image (may be generic)
    #[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    /// URL for the avatar image (may be generic), does not specify size
    #[serde(
        rename = "avatar_url_without_sizing",
        skip_serializing_if = "Option::is_none"
    )]
    pub avatar_url_without_sizing: Option<String>,
    /// API 3 credentials
    #[serde(rename = "credentials_api3", skip_serializing_if = "Option::is_none")]
    pub credentials_api3: Option<Vec<crate::models::CredentialsApi3>>,
    #[serde(rename = "credentials_email", skip_serializing_if = "Option::is_none")]
    pub credentials_email: Option<Box<crate::models::CredentialsEmail>>,
    /// Embed credentials
    #[serde(rename = "credentials_embed", skip_serializing_if = "Option::is_none")]
    pub credentials_embed: Option<Vec<crate::models::CredentialsEmbed>>,
    #[serde(rename = "credentials_google", skip_serializing_if = "Option::is_none")]
    pub credentials_google: Option<Box<crate::models::CredentialsGoogle>>,
    #[serde(rename = "credentials_ldap", skip_serializing_if = "Option::is_none")]
    pub credentials_ldap: Option<Box<crate::models::CredentialsLdap>>,
    #[serde(
        rename = "credentials_looker_openid",
        skip_serializing_if = "Option::is_none"
    )]
    pub credentials_looker_openid: Option<Box<crate::models::CredentialsLookerOpenid>>,
    #[serde(rename = "credentials_oidc", skip_serializing_if = "Option::is_none")]
    pub credentials_oidc: Option<Box<crate::models::CredentialsOidc>>,
    #[serde(rename = "credentials_saml", skip_serializing_if = "Option::is_none")]
    pub credentials_saml: Option<Box<crate::models::CredentialsSaml>>,
    #[serde(rename = "credentials_totp", skip_serializing_if = "Option::is_none")]
    pub credentials_totp: Option<Box<crate::models::CredentialsTotp>>,
    /// Full name for display (available only if both first_name and last_name are set)
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// EMail address
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// (Embed only) ID of user's group space based on the external_group_id optionally specified during embed user login
    #[serde(
        rename = "embed_group_space_id",
        skip_serializing_if = "Option::is_none"
    )]
    pub embed_group_space_id: Option<i64>,
    /// First name
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// Array of ids of the groups for this user
    #[serde(rename = "group_ids", skip_serializing_if = "Option::is_none")]
    pub group_ids: Option<Vec<i64>>,
    /// ID string for user's home space
    #[serde(rename = "home_space_id", skip_serializing_if = "Option::is_none")]
    pub home_space_id: Option<String>,
    /// ID string for user's home folder
    #[serde(rename = "home_folder_id", skip_serializing_if = "Option::is_none")]
    pub home_folder_id: Option<String>,
    /// Unique Id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Account has been disabled
    #[serde(rename = "is_disabled", skip_serializing_if = "Option::is_none")]
    pub is_disabled: Option<bool>,
    /// Last name
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// User's preferred locale. User locale takes precedence over Looker's system-wide default locale. Locale determines language of display strings and date and numeric formatting in API responses. Locale string must be a 2 letter language code or a combination of language code and region code: 'en' or 'en-US', for example.
    #[serde(rename = "locale", skip_serializing_if = "Option::is_none")]
    pub locale: Option<String>,
    /// Array of strings representing the Looker versions that this user has used (this only goes back as far as '3.54.0')
    #[serde(rename = "looker_versions", skip_serializing_if = "Option::is_none")]
    pub looker_versions: Option<Vec<String>>,
    /// User's dev workspace has been checked for presence of applicable production projects
    #[serde(
        rename = "models_dir_validated",
        skip_serializing_if = "Option::is_none"
    )]
    pub models_dir_validated: Option<bool>,
    /// ID of user's personal space
    #[serde(rename = "personal_space_id", skip_serializing_if = "Option::is_none")]
    pub personal_space_id: Option<i64>,
    /// ID of user's personal folder
    #[serde(rename = "personal_folder_id", skip_serializing_if = "Option::is_none")]
    pub personal_folder_id: Option<i64>,
    /// User is identified as an employee of Looker
    #[serde(
        rename = "presumed_looker_employee",
        skip_serializing_if = "Option::is_none"
    )]
    pub presumed_looker_employee: Option<bool>,
    /// Array of ids of the roles for this user
    #[serde(rename = "role_ids", skip_serializing_if = "Option::is_none")]
    pub role_ids: Option<Vec<i64>>,
    /// Active sessions
    #[serde(rename = "sessions", skip_serializing_if = "Option::is_none")]
    pub sessions: Option<Vec<crate::models::Session>>,
    /// Per user dictionary of undocumented state information owned by the Looker UI.
    #[serde(rename = "ui_state", skip_serializing_if = "Option::is_none")]
    pub ui_state: Option<::std::collections::HashMap<String, String>>,
    /// User is identified as an employee of Looker who has been verified via Looker corporate authentication
    #[serde(
        rename = "verified_looker_employee",
        skip_serializing_if = "Option::is_none"
    )]
    pub verified_looker_employee: Option<bool>,
    /// User's roles are managed by an external directory like SAML or LDAP and can not be changed directly.
    #[serde(
        rename = "roles_externally_managed",
        skip_serializing_if = "Option::is_none"
    )]
    pub roles_externally_managed: Option<bool>,
    /// User can be directly assigned a role.
    #[serde(rename = "allow_direct_roles", skip_serializing_if = "Option::is_none")]
    pub allow_direct_roles: Option<bool>,
    /// User can be a direct member of a normal Looker group.
    #[serde(
        rename = "allow_normal_group_membership",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_normal_group_membership: Option<bool>,
    /// User can inherit roles from a normal Looker group.
    #[serde(
        rename = "allow_roles_from_normal_groups",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_roles_from_normal_groups: Option<bool>,
    /// Link to get this item
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl User {
    pub fn new() -> User {
        User {
            can: None,
            avatar_url: None,
            avatar_url_without_sizing: None,
            credentials_api3: None,
            credentials_email: None,
            credentials_embed: None,
            credentials_google: None,
            credentials_ldap: None,
            credentials_looker_openid: None,
            credentials_oidc: None,
            credentials_saml: None,
            credentials_totp: None,
            display_name: None,
            email: None,
            embed_group_space_id: None,
            first_name: None,
            group_ids: None,
            home_space_id: None,
            home_folder_id: None,
            id: None,
            is_disabled: None,
            last_name: None,
            locale: None,
            looker_versions: None,
            models_dir_validated: None,
            personal_space_id: None,
            personal_folder_id: None,
            presumed_looker_employee: None,
            role_ids: None,
            sessions: None,
            ui_state: None,
            verified_looker_employee: None,
            roles_externally_managed: None,
            allow_direct_roles: None,
            allow_normal_group_membership: None,
            allow_roles_from_normal_groups: None,
            url: None,
        }
    }
}
