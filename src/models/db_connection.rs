/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### Try It Out!  This section describes the existing 'api-docs' page available on Looker instances. We recommend using the [API Explorer](https://looker.com/docs/r/api/explorer) instead.  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  **NOTE**! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations. (API Explorer's \"Run It\" feature requires a check mark before running API operations that can change data.)   ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DbConnection {
    /// Operations the current user is able to perform on this object
    #[serde(rename = "can", skip_serializing_if = "Option::is_none")]
    pub can: Option<::std::collections::HashMap<String, bool>>,
    /// Name of the connection. Also used as the unique identifier
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "dialect", skip_serializing_if = "Option::is_none")]
    pub dialect: Option<Box<crate::models::Dialect>>,
    /// SQL Runner snippets for this connection
    #[serde(rename = "snippets", skip_serializing_if = "Option::is_none")]
    pub snippets: Option<Vec<crate::models::Snippet>>,
    /// True if PDTs are enabled on this connection
    #[serde(rename = "pdts_enabled", skip_serializing_if = "Option::is_none")]
    pub pdts_enabled: Option<bool>,
    /// Host name/address of server
    #[serde(rename = "host", skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Port number on server
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// Username for server authentication
    #[serde(rename = "username", skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// (Write-Only) Password for server authentication
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Whether the connection uses OAuth for authentication.
    #[serde(rename = "uses_oauth", skip_serializing_if = "Option::is_none")]
    pub uses_oauth: Option<bool>,
    /// (Write-Only) Base64 encoded Certificate body for server authentication (when appropriate for dialect).
    #[serde(rename = "certificate", skip_serializing_if = "Option::is_none")]
    pub certificate: Option<String>,
    /// (Write-Only) Certificate keyfile type - .json or .p12
    #[serde(rename = "file_type", skip_serializing_if = "Option::is_none")]
    pub file_type: Option<String>,
    /// Database name
    #[serde(rename = "database", skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Time zone of database
    #[serde(rename = "db_timezone", skip_serializing_if = "Option::is_none")]
    pub db_timezone: Option<String>,
    /// Timezone to use in queries
    #[serde(rename = "query_timezone", skip_serializing_if = "Option::is_none")]
    pub query_timezone: Option<String>,
    /// Scheme name
    #[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// Maximum number of concurrent connection to use
    #[serde(rename = "max_connections", skip_serializing_if = "Option::is_none")]
    pub max_connections: Option<i64>,
    /// Maximum size of query in GBs (BigQuery only, can be a user_attribute name)
    #[serde(
        rename = "max_billing_gigabytes",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_billing_gigabytes: Option<String>,
    /// Use SSL/TLS when connecting to server
    #[serde(rename = "ssl", skip_serializing_if = "Option::is_none")]
    pub ssl: Option<bool>,
    /// Verify the SSL
    #[serde(rename = "verify_ssl", skip_serializing_if = "Option::is_none")]
    pub verify_ssl: Option<bool>,
    /// Name of temporary database (if used)
    #[serde(rename = "tmp_db_name", skip_serializing_if = "Option::is_none")]
    pub tmp_db_name: Option<String>,
    /// Additional params to add to JDBC connection string
    #[serde(
        rename = "jdbc_additional_params",
        skip_serializing_if = "Option::is_none"
    )]
    pub jdbc_additional_params: Option<String>,
    /// Connection Pool Timeout, in seconds
    #[serde(rename = "pool_timeout", skip_serializing_if = "Option::is_none")]
    pub pool_timeout: Option<i64>,
    /// (Read/Write) SQL Dialect name
    #[serde(rename = "dialect_name", skip_serializing_if = "Option::is_none")]
    pub dialect_name: Option<String>,
    /// Creation date for this connection
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Id of user who last modified this connection configuration
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Is this an example connection?
    #[serde(rename = "example", skip_serializing_if = "Option::is_none")]
    pub example: Option<bool>,
    /// (Limited access feature) Are per user db credentials enabled. Enabling will remove previously set username and password
    #[serde(
        rename = "user_db_credentials",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_db_credentials: Option<bool>,
    /// Fields whose values map to user attribute names
    #[serde(
        rename = "user_attribute_fields",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_attribute_fields: Option<Vec<String>>,
    /// Cron string specifying when maintenance such as PDT trigger checks and drops should be performed
    #[serde(rename = "maintenance_cron", skip_serializing_if = "Option::is_none")]
    pub maintenance_cron: Option<String>,
    /// Unix timestamp at start of last completed PDT trigger check process
    #[serde(rename = "last_regen_at", skip_serializing_if = "Option::is_none")]
    pub last_regen_at: Option<String>,
    /// Unix timestamp at start of last completed PDT reap process
    #[serde(rename = "last_reap_at", skip_serializing_if = "Option::is_none")]
    pub last_reap_at: Option<String>,
    /// Precache tables in the SQL Runner
    #[serde(
        rename = "sql_runner_precache_tables",
        skip_serializing_if = "Option::is_none"
    )]
    pub sql_runner_precache_tables: Option<bool>,
    /// Fetch Information Schema For SQL Writing
    #[serde(
        rename = "sql_writing_with_info_schema",
        skip_serializing_if = "Option::is_none"
    )]
    pub sql_writing_with_info_schema: Option<bool>,
    /// SQL statements (semicolon separated) to issue after connecting to the database. Requires `custom_after_connect_statements` license feature
    #[serde(
        rename = "after_connect_statements",
        skip_serializing_if = "Option::is_none"
    )]
    pub after_connect_statements: Option<String>,
    #[serde(
        rename = "pdt_context_override",
        skip_serializing_if = "Option::is_none"
    )]
    pub pdt_context_override: Option<Box<crate::models::DbConnectionOverride>>,
    /// Is this connection created and managed by Looker
    #[serde(rename = "managed", skip_serializing_if = "Option::is_none")]
    pub managed: Option<bool>,
}

impl DbConnection {
    pub fn new() -> DbConnection {
        DbConnection {
            can: None,
            name: None,
            dialect: None,
            snippets: None,
            pdts_enabled: None,
            host: None,
            port: None,
            username: None,
            password: None,
            uses_oauth: None,
            certificate: None,
            file_type: None,
            database: None,
            db_timezone: None,
            query_timezone: None,
            schema: None,
            max_connections: None,
            max_billing_gigabytes: None,
            ssl: None,
            verify_ssl: None,
            tmp_db_name: None,
            jdbc_additional_params: None,
            pool_timeout: None,
            dialect_name: None,
            created_at: None,
            user_id: None,
            example: None,
            user_db_credentials: None,
            user_attribute_fields: None,
            maintenance_cron: None,
            last_regen_at: None,
            last_reap_at: None,
            sql_runner_precache_tables: None,
            sql_writing_with_info_schema: None,
            after_connect_statements: None,
            pdt_context_override: None,
            managed: None,
        }
    }
}
