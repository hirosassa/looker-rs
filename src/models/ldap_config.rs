/*
 * Looker API 3.1 Reference
 *
 * ### Authorization  The classic method of API authorization uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page.  API 4.0 adds additional ways to authenticate API requests, including OAuth and CORS requests.  For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization).   ### API Explorer  The API Explorer is a Looker-provided utility with many new and unique features for learning and using the Looker API and SDKs. It is a replacement for the 'api-docs' page currently provided on Looker instances.  For details, see the [API Explorer documentation](https://looker.com/docs/r/api/explorer).   ### Looker Language SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. SDKs for a variety of programming languages are also provided to streamline using the API. Looker has an OpenSource [sdk-codegen project](https://github.com/looker-open-source/sdk-codegen) that provides several language SDKs. Language SDKs generated by `sdk-codegen` have an Authentication manager that can automatically authenticate API requests when needed.  For details on available Looker SDKs, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks).   ### API Versioning  Future releases of Looker expand the latest API version release-by-release to securely expose more and more of the core power of the Looker platform to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning (but we will try to avoid doing that). Stable (non-beta) API endpoints should not receive breaking changes in future releases.  For details, see [Looker API Versioning](https://looker.com/docs/r/api/versioning).   ### Try It Out!  This section describes the existing 'api-docs' page available on Looker instances. We recommend using the [API Explorer](https://looker.com/docs/r/api/explorer) instead.  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  **NOTE**! With great power comes great responsibility: The \"Try It Out!\" button makes API calls to your live Looker instance. Be especially careful with destructive API operations such as `delete_user` or similar. There is no \"undo\" for API operations. (API Explorer's \"Run It\" feature requires a check mark before running API operations that can change data.)   ### In This Release  The following are a few examples of noteworthy items that have changed between API 3.0 and API 3.1. For more comprehensive coverage of API changes, please see the release notes for your Looker release.  ### Examples of new things added in API 3.1 (compared to API 3.0):  * [Dashboard construction](#!/3.1/Dashboard/) APIs * [Themes](#!/3.1/Theme/) and [custom color collections](#!/3.1/ColorCollection) APIs * Create and run [SQL Runner](#!/3.1/Query/run_sql_query) queries * Create and run [merged results](#!/3.1/Query/create_merge_query) queries * Create and modify [dashboard filters](#!/3.1/Dashboard/create_dashboard_filter) * Create and modify [password requirements](#!/3.1/Auth/password_config)  ### Deprecated in API 3.0  The following functions and properties have been deprecated in API 3.0.  They continue to exist and work in API 3.0 for the next several Looker releases but they have not been carried forward to API 3.1:  * Dashboard Prefetch functions * User access_filter functions * User API 1.0 credentials functions * Space.is_root and Space.is_user_root properties. Use Space.is_shared_root and Space.is_users_root instead.  ### Semantic changes in API 3.1:  * [all_looks()](#!/3.1/Look/all_looks) no longer includes soft-deleted looks, matching [all_dashboards()](#!/3.1/Dashboard/all_dashboards) behavior. You can find soft-deleted looks using [search_looks()](#!/3.1/Look/search_looks) with the `deleted` param set to True. * [all_spaces()](#!/3.1/Space/all_spaces) no longer includes duplicate items * [search_users()](#!/3.1/User/search_users) no longer accepts Y,y,1,0,N,n for Boolean params, only \"true\" and \"false\". * For greater client and network compatibility, [render_task_results](#!/3.1/RenderTask/render_task_results) now returns HTTP status **202 Accepted** instead of HTTP status **102 Processing** * [all_running_queries()](#!/3.1/Query/all_running_queries) and [kill_query](#!/3.1/Query/kill_query) functions have moved into the [Query](#!/3.1/Query/) function group.  The API Explorer can be used to [interactively compare](https://looker.com/docs/r/api/explorer#comparing_api_versions) the differences between API 3.1 and 4.0.   
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct LdapConfig {
    /// Operations the current user is able to perform on this object
    #[serde(rename = "can", skip_serializing_if = "Option::is_none")]
    pub can: Option<::std::collections::HashMap<String, bool>>,
    /// Allow alternate email-based login via '/login/email' for admins and for specified users with the 'login_special_email' permission. This option is useful as a fallback during ldap setup, if ldap config problems occur later, or if you need to support some users who are not in your ldap directory. Looker email/password logins are always disabled for regular users when ldap is enabled.
    #[serde(rename = "alternate_email_login_allowed", skip_serializing_if = "Option::is_none")]
    pub alternate_email_login_allowed: Option<bool>,
    /// (Write-Only)  Password for the LDAP account used to access the LDAP server
    #[serde(rename = "auth_password", skip_serializing_if = "Option::is_none")]
    pub auth_password: Option<String>,
    /// Users will not be allowed to login at all unless a role for them is found in LDAP if set to true
    #[serde(rename = "auth_requires_role", skip_serializing_if = "Option::is_none")]
    pub auth_requires_role: Option<bool>,
    /// Distinguished name of LDAP account used to access the LDAP server
    #[serde(rename = "auth_username", skip_serializing_if = "Option::is_none")]
    pub auth_username: Option<String>,
    /// LDAP server hostname
    #[serde(rename = "connection_host", skip_serializing_if = "Option::is_none")]
    pub connection_host: Option<String>,
    /// LDAP host port
    #[serde(rename = "connection_port", skip_serializing_if = "Option::is_none")]
    pub connection_port: Option<String>,
    /// Use Transport Layer Security
    #[serde(rename = "connection_tls", skip_serializing_if = "Option::is_none")]
    pub connection_tls: Option<bool>,
    /// Do not verify peer when using TLS
    #[serde(rename = "connection_tls_no_verify", skip_serializing_if = "Option::is_none")]
    pub connection_tls_no_verify: Option<bool>,
    /// (Write-Only)  Array of ids of groups that will be applied to new users the first time they login via LDAP
    #[serde(rename = "default_new_user_group_ids", skip_serializing_if = "Option::is_none")]
    pub default_new_user_group_ids: Option<Vec<i64>>,
    /// (Read-only) Groups that will be applied to new users the first time they login via LDAP
    #[serde(rename = "default_new_user_groups", skip_serializing_if = "Option::is_none")]
    pub default_new_user_groups: Option<Vec<crate::models::Group>>,
    /// (Write-Only)  Array of ids of roles that will be applied to new users the first time they login via LDAP
    #[serde(rename = "default_new_user_role_ids", skip_serializing_if = "Option::is_none")]
    pub default_new_user_role_ids: Option<Vec<i64>>,
    /// (Read-only) Roles that will be applied to new users the first time they login via LDAP
    #[serde(rename = "default_new_user_roles", skip_serializing_if = "Option::is_none")]
    pub default_new_user_roles: Option<Vec<crate::models::Role>>,
    /// Enable/Disable LDAP authentication for the server
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Don't attempt to do LDAP search result paging (RFC 2696) even if the LDAP server claims to support it.
    #[serde(rename = "force_no_page", skip_serializing_if = "Option::is_none")]
    pub force_no_page: Option<bool>,
    /// (Read-only) Array of mappings between LDAP Groups and Looker Roles
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<crate::models::LdapGroupRead>>,
    /// Base dn for finding groups in LDAP searches
    #[serde(rename = "groups_base_dn", skip_serializing_if = "Option::is_none")]
    pub groups_base_dn: Option<String>,
    /// Identifier for a strategy for how Looker will search for groups in the LDAP server
    #[serde(rename = "groups_finder_type", skip_serializing_if = "Option::is_none")]
    pub groups_finder_type: Option<String>,
    /// LDAP Group attribute that signifies the members of the groups. Most commonly 'member'
    #[serde(rename = "groups_member_attribute", skip_serializing_if = "Option::is_none")]
    pub groups_member_attribute: Option<String>,
    /// Optional comma-separated list of supported LDAP objectclass for groups when doing groups searches
    #[serde(rename = "groups_objectclasses", skip_serializing_if = "Option::is_none")]
    pub groups_objectclasses: Option<String>,
    /// LDAP Group attribute that signifies the user in a group. Most commonly 'dn'
    #[serde(rename = "groups_user_attribute", skip_serializing_if = "Option::is_none")]
    pub groups_user_attribute: Option<String>,
    /// (Read/Write) Array of mappings between LDAP Groups and arrays of Looker Role ids
    #[serde(rename = "groups_with_role_ids", skip_serializing_if = "Option::is_none")]
    pub groups_with_role_ids: Option<Vec<crate::models::LdapGroupWrite>>,
    /// (Read-only) Has the password been set for the LDAP account used to access the LDAP server
    #[serde(rename = "has_auth_password", skip_serializing_if = "Option::is_none")]
    pub has_auth_password: Option<bool>,
    /// Merge first-time ldap login to existing user account by email addresses. When a user logs in for the first time via ldap this option will connect this user into their existing account by finding the account with a matching email address. Otherwise a new user account will be created for the user.
    #[serde(rename = "merge_new_users_by_email", skip_serializing_if = "Option::is_none")]
    pub merge_new_users_by_email: Option<bool>,
    /// When this config was last modified
    #[serde(rename = "modified_at", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<String>,
    /// User id of user who last modified this config
    #[serde(rename = "modified_by", skip_serializing_if = "Option::is_none")]
    pub modified_by: Option<String>,
    /// Set user roles in Looker based on groups from LDAP
    #[serde(rename = "set_roles_from_groups", skip_serializing_if = "Option::is_none")]
    pub set_roles_from_groups: Option<bool>,
    /// (Write-Only)  Test LDAP user password. For ldap tests only.
    #[serde(rename = "test_ldap_password", skip_serializing_if = "Option::is_none")]
    pub test_ldap_password: Option<String>,
    /// (Write-Only)  Test LDAP user login id. For ldap tests only.
    #[serde(rename = "test_ldap_user", skip_serializing_if = "Option::is_none")]
    pub test_ldap_user: Option<String>,
    /// Name of user record attributes used to indicate email address field
    #[serde(rename = "user_attribute_map_email", skip_serializing_if = "Option::is_none")]
    pub user_attribute_map_email: Option<String>,
    /// Name of user record attributes used to indicate first name
    #[serde(rename = "user_attribute_map_first_name", skip_serializing_if = "Option::is_none")]
    pub user_attribute_map_first_name: Option<String>,
    /// Name of user record attributes used to indicate last name
    #[serde(rename = "user_attribute_map_last_name", skip_serializing_if = "Option::is_none")]
    pub user_attribute_map_last_name: Option<String>,
    /// Name of user record attributes used to indicate unique record id
    #[serde(rename = "user_attribute_map_ldap_id", skip_serializing_if = "Option::is_none")]
    pub user_attribute_map_ldap_id: Option<String>,
    /// (Read-only) Array of mappings between LDAP User Attributes and Looker User Attributes
    #[serde(rename = "user_attributes", skip_serializing_if = "Option::is_none")]
    pub user_attributes: Option<Vec<crate::models::LdapUserAttributeRead>>,
    /// (Read/Write) Array of mappings between LDAP User Attributes and arrays of Looker User Attribute ids
    #[serde(rename = "user_attributes_with_ids", skip_serializing_if = "Option::is_none")]
    pub user_attributes_with_ids: Option<Vec<crate::models::LdapUserAttributeWrite>>,
    /// Distinguished name of LDAP node used as the base for user searches
    #[serde(rename = "user_bind_base_dn", skip_serializing_if = "Option::is_none")]
    pub user_bind_base_dn: Option<String>,
    /// (Optional) Custom RFC-2254 filter clause for use in finding user during login. Combined via 'and' with the other generated filter clauses.
    #[serde(rename = "user_custom_filter", skip_serializing_if = "Option::is_none")]
    pub user_custom_filter: Option<String>,
    /// Name(s) of user record attributes used for matching user login id (comma separated list)
    #[serde(rename = "user_id_attribute_names", skip_serializing_if = "Option::is_none")]
    pub user_id_attribute_names: Option<String>,
    /// (Optional) Name of user record objectclass used for finding user during login id
    #[serde(rename = "user_objectclass", skip_serializing_if = "Option::is_none")]
    pub user_objectclass: Option<String>,
    /// Allow LDAP auth'd users to be members of non-reflected Looker groups. If 'false', user will be removed from non-reflected groups on login.
    #[serde(rename = "allow_normal_group_membership", skip_serializing_if = "Option::is_none")]
    pub allow_normal_group_membership: Option<bool>,
    /// LDAP auth'd users will be able to inherit roles from non-reflected Looker groups.
    #[serde(rename = "allow_roles_from_normal_groups", skip_serializing_if = "Option::is_none")]
    pub allow_roles_from_normal_groups: Option<bool>,
    /// Allows roles to be directly assigned to LDAP auth'd users.
    #[serde(rename = "allow_direct_roles", skip_serializing_if = "Option::is_none")]
    pub allow_direct_roles: Option<bool>,
    /// Link to get this item
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl LdapConfig {
    pub fn new() -> LdapConfig {
        LdapConfig {
            can: None,
            alternate_email_login_allowed: None,
            auth_password: None,
            auth_requires_role: None,
            auth_username: None,
            connection_host: None,
            connection_port: None,
            connection_tls: None,
            connection_tls_no_verify: None,
            default_new_user_group_ids: None,
            default_new_user_groups: None,
            default_new_user_role_ids: None,
            default_new_user_roles: None,
            enabled: None,
            force_no_page: None,
            groups: None,
            groups_base_dn: None,
            groups_finder_type: None,
            groups_member_attribute: None,
            groups_objectclasses: None,
            groups_user_attribute: None,
            groups_with_role_ids: None,
            has_auth_password: None,
            merge_new_users_by_email: None,
            modified_at: None,
            modified_by: None,
            set_roles_from_groups: None,
            test_ldap_password: None,
            test_ldap_user: None,
            user_attribute_map_email: None,
            user_attribute_map_first_name: None,
            user_attribute_map_last_name: None,
            user_attribute_map_ldap_id: None,
            user_attributes: None,
            user_attributes_with_ids: None,
            user_bind_base_dn: None,
            user_custom_filter: None,
            user_id_attribute_names: None,
            user_objectclass: None,
            allow_normal_group_membership: None,
            allow_roles_from_normal_groups: None,
            allow_direct_roles: None,
            url: None,
        }
    }
}


